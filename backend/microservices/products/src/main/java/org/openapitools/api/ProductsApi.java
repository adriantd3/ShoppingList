/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.dto.NewProduct;
import org.openapitools.dto.Product;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-05T18:53:31.285160+01:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "Internal", description = "Endpoints that are called from other internal microservices")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * HEAD /products/{id} : Check a product exists
     *
     * @param id (required)
     * @return OK (status code 200)
     * or Bad Request (status code 400)
     * or Product not found (status code 404)
     */
    @Operation(
            operationId = "checkProduct",
            summary = "Check a product exists",
            description = "",
            tags = {"Internal"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK"),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "404", description = "Product not found")
            }
    )
    @RequestMapping(
            method = RequestMethod.HEAD,
            value = "/products/{id}"
    )

    default ResponseEntity<Void> checkProduct(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{id} : Delete a product
     *
     * @param id     (required)
     * @param userId The user caller&#39;s ID (required)
     * @return (status code 204)
     * or Bad Request (status code 400)
     * or User ID is mandatory to access this resource (status code 401)
     * or You do not have permission to access this resource (status code 403)
     * or Product not found (status code 404)
     */
    @Operation(
            operationId = "deleteProduct",
            summary = "Delete a product",
            description = "",
            tags = {"Default"},
            responses = {
                    @ApiResponse(responseCode = "204", description = ""),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "User ID is mandatory to access this resource"),
                    @ApiResponse(responseCode = "403", description = "You do not have permission to access this resource"),
                    @ApiResponse(responseCode = "404", description = "Product not found")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/products/{id}"
    )

    default ResponseEntity<Void> deleteProduct(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "user_id", description = "The user caller's ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) Integer userId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{id} : Retrieve a product
     *
     * @param id     (required)
     * @param userId The user caller&#39;s ID (required)
     * @return (status code 200)
     * or Bad Request (status code 400)
     * or User ID is mandatory to access this resource (status code 401)
     * or You do not have permission to access this resource (status code 403)
     * or Product not found (status code 404)
     */
    @Operation(
            operationId = "getProduct",
            summary = "Retrieve a product",
            description = "",
            tags = {"Default"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "User ID is mandatory to access this resource"),
                    @ApiResponse(responseCode = "403", description = "You do not have permission to access this resource"),
                    @ApiResponse(responseCode = "404", description = "Product not found")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/products/{id}",
            produces = {"application/json"}
    )

    default ResponseEntity<Product> getProduct(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "user_id", description = "The user caller's ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : { \"image\" : \"image\", \"id\" : 0, \"username\" : \"username\" }, \"image\" : \"image\", \"category_id\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /products : Create a new product
     *
     * @param userId     The user caller&#39;s ID (required)
     * @param newProduct Request body for creating a new Product (optional)
     * @return (status code 200)
     * or Bad Request (status code 400)
     * or User ID is mandatory to access this resource (status code 401)
     */
    @Operation(
            operationId = "postProduct",
            summary = "Create a new product",
            description = "",
            tags = {"Default"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "User ID is mandatory to access this resource")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/products",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<Product> postProduct(
            @NotNull @Parameter(name = "user_id", description = "The user caller's ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) Integer userId,
            @Parameter(name = "NewProduct", description = "Request body for creating a new Product") @Valid @RequestBody(required = false) NewProduct newProduct
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : { \"image\" : \"image\", \"id\" : 0, \"username\" : \"username\" }, \"image\" : \"image\", \"category_id\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /products/{id} : Update a product
     *
     * @param id         (required)
     * @param userId     The user caller&#39;s ID (required)
     * @param newProduct Request body for creating a new Product (optional)
     * @return (status code 200)
     * or Bad Request (status code 400)
     * or User ID is mandatory to access this resource (status code 401)
     * or You do not have permission to access this resource (status code 403)
     * or Product not found (status code 404)
     */
    @Operation(
            operationId = "putProduct",
            summary = "Update a product",
            description = "",
            tags = {"Default"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request"),
                    @ApiResponse(responseCode = "401", description = "User ID is mandatory to access this resource"),
                    @ApiResponse(responseCode = "403", description = "You do not have permission to access this resource"),
                    @ApiResponse(responseCode = "404", description = "Product not found")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/products/{id}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )

    default ResponseEntity<Product> putProduct(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
            @NotNull @Parameter(name = "user_id", description = "The user caller's ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) Integer userId,
            @Parameter(name = "NewProduct", description = "Request body for creating a new Product") @Valid @RequestBody(required = false) NewProduct newProduct
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"owner\" : { \"image\" : \"image\", \"id\" : 0, \"username\" : \"username\" }, \"image\" : \"image\", \"category_id\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products : Retrieves user&#39;s products
     *
     * @param userId The user caller&#39;s ID (required)
     * @return (status code 200)
     * or User ID is mandatory to access this resource (status code 401)
     * or You do not have permission to access this resource (status code 403)
     */
    @Operation(
            operationId = "searchProducts",
            summary = "Retrieves user's products",
            description = "",
            tags = {"Default"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
                    }),
                    @ApiResponse(responseCode = "401", description = "User ID is mandatory to access this resource"),
                    @ApiResponse(responseCode = "403", description = "You do not have permission to access this resource")
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/products",
            produces = {"application/json"}
    )

    default ResponseEntity<List<Product>> searchProducts(
            @NotNull @Parameter(name = "user_id", description = "The user caller's ID", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "user_id", required = true) Integer userId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"owner\" : { \"image\" : \"image\", \"id\" : 0, \"username\" : \"username\" }, \"image\" : \"image\", \"category_id\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" }, { \"owner\" : { \"image\" : \"image\", \"id\" : 0, \"username\" : \"username\" }, \"image\" : \"image\", \"category_id\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
